#!/bin/bash

# create a new temp file with process id if no input file specified
tempfile="tmpfile$$"
# create a temp file for file rotation
tempfile_transpose="tmpfile$$_transpose"
#echo $tempfile

# trap interrupt if needed
# removes the tempfile and exits
trap "rm -f $tempFile; exit 1" INT HUP TERM EXIT

# Check for the correct number of arguments
# There should be only 1 or 2 arguments
#   $# returns the num of arguments
# exit 1 if incorrect numbers of parameters
if [[ "$#" -gt 2 || "$#" -lt 1 ]]
then
  echo "Usage: ./stats {-rows|-cols} [file]" 1>&2
  exit 1
fi



# check to see if text file is there. If not, let user enter into temp file
if [[ "$#" -eq 2 ]]
then
  # if argument is there, use it as the input
  input=$2
else
  # prompt user with cat for stdin
  echo "enter vals"
  cat > "$tempfile"
  input="$tempfile"

fi


# check that file exists and is readable
if [[ -a $2 && -r $2 ]]
then
  echo "file found"
else
  #echo "./stats: cannot read $2" 1>&2
  echo "by pass"
  #exit 1
fi


# check for existing but empty file --- TO DO!!!!!!  use -s



# check for cannot read file
# if user self entered, use input, else use $2


# transpose function for converting columns into rows
# function will output a new file
transpose(){

  # first count number of columns
  # by using head to get the first line from the file

  line=$(head -n 1 math.txt)  #this needs to be fixed
  echo "$line  is first line in transpose"

  #initialize empty array, and put this line inside
  numArrs=()
  numArrs=("${numArrs[@]}" $line)
  echo "${numArrs[@]} is in numArrs"

  # count the number of ELEMENTS (aka Columns)
  # https://www.cyberciti.biz/faq/finding-bash-shell-array-length-elements/undo
  echo "${#numArrs[@]} is the number of columns ******"
  numCols=${#numArrs[@]}
  echo "confirming $numCols"

  # transpose data using for loop from 1 to numCols
  for indexCol in $(seq 1 $numCols)
  do
    #echo "$indexCol" >> $tempfile_transpose

    # here is where we initialize empty array for the Column
    colArray=()
    # this is the inside nested loop
    while read line
    do
      #echo "sslkjfd $index" >> $tempfile_transpose
      # create an array, and put the line inside
      #aa=()
      #aa=("${aa[@]}" $line)
      #echo "${numArrs[@]} is what is just read intothe array"
      echo "for col $indexCol, reading a whole row(aka line)"
      tmpArr=()
      tmpArr=("${tmpArr[@]}" $line)
      echo "${tmpArr[@]}  is now in tmpArr"

      # now each time, use $indexCol to find
      colArray+=(${tmpArr[$indexCol - 1]})    ### Fix index column minus 1 ######
      #echo "we jsut put ${tmpArr[$indexCol]} into the colArray"


    done < $input
    echo "Finallly........ the colArray is ${colArray[@]}"
    echo ${colArray[@]} >> $tempfile_transpose
    echo "${#colArray[@]} is the num of values colArray" # after reading all rows
  done


}


# Do if/else check, this is for rows. -----------------
# check for -r -c and -both (-both should show usage )

if [[ $1 == -r* ]]
then

echo "Averages  Median"

while read line
do
  #echo $line
  # for each row, the array must be cleared to 0 elements!
  # put the line into the array
  numArr=()
  numElementsInRow=0
  numArr=("${numArr[@]}" $line)

  # initialize variable "sum" to hold sum of row
  sum=0
  for i in ${numArr[@]}
    do
      # for each element add 1 to the numElementsInRow
      numElementsInRow=$((numElementsInRow + 1))
      # add the elements value to the sum
      sum=$((sum + i))
    done

  #echo the average for the row. Ensure that numbers are rounded correctly

  average=$(( (sum+(numElementsInRow/2))/numElementsInRow ))
  echo "$average"
  #echo "the sum is $sum"
  echo "The number of elements is: $numElementsInRow"
  #echo "the first element is ${numArr[0]}"

  # sort the array
  #echo "${numArr[@]}" # this is how to print the array

  #for i in "${array[@]}"; do echo "$i"; done | sort -n
  #numArr=($(for each in ${numArr[@]}; do echo "$each" ; done | sort -n ))
  numArr=($(for each in ${numArr[@]}; do echo "$each" ; done | sort -n ))


  echo "${numArr[@]} is the sorted row"
  # determine element which to use for median
  median=0
  # if numElementsInRow is odd
  if [[ $((numElementsInRow%2)) -eq 1 ]]
    then
    echo "The median is ${numArr[$((numElementsInRow/2))]}"
  else

    echo "num of elements in row is even"
    echo "the median is ${}"
    # if there are an an even number of elemnts per row
    #choose larger of the two middle values

  fi
  # else numElementsInRow is even

  # echo out the median
done < $input


#---- For Adding up columns ---------------
elif [[ $1 == -c* ]]
  then
  transpose
  echo "starts with c"
  input=$tempfile_transpose
  echo "now using transpose file"

  echo "-----------  transpose finished -------------"

  while read line
  do
    #echo $line
    # for each row, the array must be cleared to 0 elements!
    # put the line into the array
    numArr=()
    numElementsInRow=0
    numArr=("${numArr[@]}" $line)

    # initialize variable "sum" to hold sum of row
    sum=0
    for i in ${numArr[@]}
      do
        # for each element add 1 to the numElementsInRow
        numElementsInRow=$((numElementsInRow + 1))
        # add the elements value to the sum
        sum=$((sum + i))
      done

    #echo the average for the row. Ensure that numbers are rounded correctly

    average=$(( (sum+(numElementsInRow/2))/numElementsInRow ))
    echo "$average  is the averge"
    #echo "the sum is $sum"
    echo "The number of elements is: $numElementsInRow"
    #echo "the first element is ${numArr[0]}"

    # sort the array
    #echo "${numArr[@]}" # this is how to print the array

    #for i in "${array[@]}"; do echo "$i"; done | sort -n
    #numArr=($(for each in ${numArr[@]}; do echo "$each" ; done | sort -n ))
    numArr=($(for each in ${numArr[@]}; do echo "$each" ; done | sort -n ))


    echo "${numArr[@]} is the sorted row"
    # determine element which to use for median
    median=0
    # if numElementsInRow is odd
    if [[ $((numElementsInRow%2)) -eq 1 ]]
      then
      echo "The median is ${numArr[$((numElementsInRow/2))]}"
    else

      echo "num of elements in row is even"

      # if there are an an even number of elemnts per row
      #choose larger of the two middle values

    fi
    # else numElementsInRow is even

    # echo out the median
  done < $input



else
  echo "not r or c"
  # state usage here
fi

# Remove temp file???
